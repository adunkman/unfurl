name: QC

on:
  push:
    branches-ignore: [main]
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build API docker image
        run: docker-compose build api

      - name: Build API Lambda bundle
        run: docker-compose run api run build

      - name: Store API Lambda bundle as artifact
        uses: actions/upload-artifact@v2
        with:
          name: API Lambda bundle
          if-no-files-found: error
          path: dist/*.zip

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build API docker image
        run: docker-compose build api

      - name: Run API tests
        run: docker-compose run api test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: Install npm dependencies
        run: npm ci

      - name: Lint files with prettier
        run: npm run lint:prettier

      - name: Lint files with tflint
        run: docker-compose run tflint

  scan:
    name: Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Terrascan on Terraform configuration
        run: docker-compose run terrascan

  plan:
    name: Plan deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.repository_owner == 'adunkman'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore API Lambda bundle artifact
        uses: actions/download-artifact@v2
        with:
          name: API Lambda bundle
          path: dist

      - name: Build Terraform docker image
        run: docker-compose build terraform

      - name: Initialize Terraform
        run: docker-compose run terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Output Terraform plan
        run: docker-compose run terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
